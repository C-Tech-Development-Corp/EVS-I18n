{
  "categories": [
    {
      "name": "Estimation",
      "display": "Estimation",
      "modules": [
        {
          "name": "2d estimation",
          "display": "2d estimation",
          "desc": "Performs a two dimensional estimation of analytical data. Can also estimate analytical data sourced from other fields, or map data onto an external grid.",
          "keywords": "*estimation 2d interpolate krig krig_2d"
        },
        {
          "name": "3d estimation",
          "display": "3d estimation",
          "desc": "Performs a three dimensional estimation of analytical data. Can also estimate analytical data sourced from other fields, or map data onto an external grid.",
          "keywords": "*estimation 3d interpolate krig krig_3d"
        },
        {
          "name": "gridding and horizons",
          "display": "gridding and horizons",
          "desc": "Create complex grids and estimate data into horizons. Used to constrain 3d models, create geologic surfaces, water table surfaces, and more.",
          "keywords": "*gridding *horizons stratigraphy krig krig_3d_geology interpolate estimation"
        },
        {
          "name": "analytical realization",
          "display": "analytical realization",
          "desc": "Perform Fast Geostatistical Realizations of analytical data.",
          "keywords": "analytical realization fgr"
        },
        {
          "name": "stratigraphic realization",
          "display": "stratigraphic realization",
          "desc": "Perform Fast Geostatistical Realizations of stratigraphic data.",
          "keywords": "stratigraphic realization fgr"
        },
        {
          "name": "lithologic realization",
          "display": "lithologic realization",
          "desc": "Perform Fast Geostatistical Realizations of lithologic data.",
          "keywords": "lithologic indicator realization fgr"
        },
        {
          "name": "external kriging",
          "display": "external kriging",
          "desc": "The external_kriging will output both data and a grid in the simple GeoEAS format.",
          "keywords": "external kriging"
        }
      ]
    },
    {
      "name": "Geology",
      "display": "Geology",
      "modules": [
        {
          "name": "create stratigraphic hierarchy",
          "display": "create stratigraphic hierarchy",
          "desc": "The create stratigraphic hierarchy module reads a special input file format called a pgf file, and then allows the user to build geologic surfaces based on the input file's geologic surface intersections. The surface hierarchy can either be generated automatically for simple geology models or for every layer for complex models. When the user is finished creating surfaces the gmf file can be finalized and converted into a *.GEO file.",
          "keywords": "create stratigraphic hierarchy make_geo_hierarchy"
        },
        {
          "name": "horizons to 3d",
          "display": "horizons to 3d",
          "desc": "Create 3-dimensional solid layers from the 2-dimensional surfaces in a geology field, to allow visualizations of the geologic layering of a system.",
          "keywords": "*horizons to 3d_geology_map"
        },
        {
          "name": "horizons to 3d structured",
          "display": "horizons to 3d structured",
          "desc": "Create 3-dimensional solid layers from the 2-dimensional surfaces produced by Krig_3D_Geology, to allow visualizations of the geologic layering of a system.",
          "keywords": "horizons to 3d geology_to_structured"
        },
        {
          "name": "layer from horizon",
          "display": "layer from horizon",
          "desc": "Create a layer based on an input surface and variable elevation value.",
          "keywords": "layer from horizon surface"
        },
        {
          "name": "surface from horizons",
          "display": "surface from horizons",
          "desc": "Provides complete control of displaying, scaling and exploding one geologic surface from a set of surfaces.",
          "keywords": "*surface *horizons from geologic"
        },
        {
          "name": "surfaces from horizons",
          "display": "surfaces from horizons",
          "desc": "Provides complete control of displaying, scaling and exploding one or more geologic surfaces from a set of surfaces.",
          "keywords": "*surfaces *horizons from geologic"
        },
        {
          "name": "lithologic modeling",
          "display": "lithologic modeling",
          "desc": "Estimate material data to generate a lithologic model.",
          "keywords": "*lithologic modeling indicator geology"
        },
        {
          "name": "mask horizons",
          "display": "mask horizons",
          "desc": "Allows horizons to be subset by expression or a surface.",
          "keywords": "mask horizons geology"
        },
        {
          "name": "edit horizons",
          "display": "edit horizons",
          "desc": "Provide fine control and editing of estimated horizon data.",
          "keywords": "*edit *horizons"
        },
        {
          "name": "horizon ranking",
          "display": "horizon ranking",
          "desc": "Adjust individual horizon priorities and rankings.",
          "keywords": "*horizon *ranking"
        },
        {
          "name": "material mapping",
          "display": "material mapping",
          "desc": "This module can re-assign material data for the purpose of grouping.",
          "keywords": "*material *mapping"
        },
        {
          "name": "combine horizons",
          "display": "combine horizons",
          "desc": "Merge horizons from multiple fields.",
          "keywords": "*combine *horizons"
        },
        {
          "name": "subset horizons",
          "display": "subset horizons",
          "desc": "Subset horizons to constrain model prior to conversion to surface or layers.",
          "keywords": "*subset *horizons"
        },
        {
          "name": "collapse horizons",
          "display": "collapse horizons",
          "desc": "Subset horizons to create a single merged layer.",
          "keywords": "collapse horizons make_single_layer"
        },
        {
          "name": "displace block",
          "display": "displace block",
          "desc": "The displace block module translates a field in z by the input surface and input surface data",
          "keywords": "*displace *block"
        },
        {
          "name": "adaptive indicator krig",
          "display": "adaptive indicator krig",
          "desc": "An alternative geologic modeling concept that uses the indicator method for assigning each node's material in a grid based on data.",
          "keywords": "*adaptive *indicator *krig"
        }
      ]
    },
    {
      "name": "Display",
      "display": "Display",
      "modules": [
        {
          "name": "post samples",
          "display": "post samples",
          "desc": "Display your input data.",
          "keywords": "*post *samples borings wells"
        },
        {
          "name": "explode and scale",
          "display": "explode and scale",
          "desc": "Separate (or explode) and apply a scaling factor to the vertical dimension (z-coordinate) of cell sets in a model.",
          "keywords": "*explode *scale and"
        },
        {
          "name": "plume shell",
          "display": "plume shell",
          "desc": "Subset a volumetric model and display a non-volumetric shell of a plume.",
          "keywords": "*plume shell"
        },
        {
          "name": "intersection shell",
          "display": "intersection shell",
          "desc": "Subset a volumetric model with multiple subsets and display a non-volumetric shell of the results.",
          "keywords": "*intersection plume shell"
        },
        {
          "name": "change minmax",
          "display": "change minmax",
          "desc": "Set min and max values above the true maximum data range and min values below the true minimum data range.",
          "keywords": "*change *minmax"
        },
        {
          "name": "band data",
          "display": "band data",
          "desc": "Color surface and volumetric objects in solid colored bands.",
          "keywords": "band data contour"
        },
        {
          "name": "volume renderer",
          "display": "volume renderer",
          "desc": "Directly renders a 3D uniform field using either the Back-to-Front (BTF) or Ray-tracing volume rendering techniques.",
          "keywords": "*volume *renderer"
        },
        {
          "name": "opacity by nodal data",
          "display": "opacity by nodal data",
          "desc": "Adjust the opacity of any object based on its data values.",
          "keywords": "nodal data adjust_opacity"
        },
        {
          "name": "texture colors",
          "display": "texture colors",
          "desc": "The texture_colors module does high-quality coloring based on texturing.",
          "keywords": "*texture *colors"
        },
        {
          "name": "illuminated lines",
          "display": "illuminated lines",
          "desc": "The Illuminated Lines module uses a texture mapped illumination model on polylines with line halo and animation effects.",
          "keywords": "*illuminated *lines"
        },
        {
          "name": "texture wave",
          "display": "texture wave",
          "desc": "The texture_wave module utilizes opacity and texture mapping to create an animated effect. This module works with both OpenGL and Software Rendering.",
          "keywords": "*texture *wave"
        },
        {
          "name": "slope and aspect",
          "display": "slope and aspect",
          "desc": "Determine the slope and aspect of a surface.",
          "keywords": "*slope *and *aspect"
        },
        {
          "name": "select single data",
          "display": "select single data",
          "desc": "Extract a single node or cell data component from a field.",
          "keywords": "*select *single *data"
        },
        {
          "name": "read wavefront obj",
          "display": "read wavefront obj",
          "desc": "Read Wavefront OBJ files for display.",
          "keywords": "*read *wavefront *obj"
        }
      ]
    },
    {
      "name": "Analysis",
      "display": "Analysis",
      "modules": [
        {
          "name": "volumetrics",
          "display": "volumetrics",
          "desc": "Calculate the volumes and masses of soil, and chemicals in soils and ground water.",
          "keywords": "*volumetrics"
        },
        {
          "name": "cell volumetrics",
          "display": "cell volumetrics",
          "desc": "Calculate the volumes and masses of soil, and chemicals in soils and ground water at each cell.",
          "keywords": "*cell *volumetrics"
        },
        {
          "name": "compute surface area",
          "display": "compute surface area",
          "desc": "Calculate the surface area of the entire field input.",
          "keywords": "compute surface area integrate"
        },
        {
          "name": "file statistics",
          "display": "file statistics",
          "desc": "Calculate and display statistics about the data contained in the selected file.",
          "keywords": "*file *statistics"
        },
        {
          "name": "statistics",
          "display": "statistics",
          "desc": "Analyze the statistical distribution of a single data from a field.",
          "keywords": "*statistics"
        },
        {
          "name": "well decommission",
          "display": "well decommission",
          "desc": "Analyzes all available data and quantifies the impact to site assessment quality of removing each well. ",
          "keywords": "*well *decommission"
        }
      ]
    },
    {
      "name": "Annotation",
      "display": "Annotation",
      "modules": [
        {
          "name": "legend",
          "display": "legend",
          "desc": "The Legend module is used to place a color scale bar in the viewer window.",
          "keywords": "*legend"
        },
        {
          "name": "3d legend",
          "display": "3d legend",
          "desc": "The Legend module is used to place a color scale bar in the viewer window.",
          "keywords": "*3d *legend"
        },
        {
          "name": "axes",
          "display": "axes",
          "desc": "Place 3D axes in the viewer scaled by the model data and/or user defined limits.",
          "keywords": "*axes"
        },
        {
          "name": "direction indicator",
          "display": "direction indicator",
          "desc": "Place a 3D North Arrow or Compass Rose in the Viewer.",
          "keywords": "direction indicator north compass"
        },
        {
          "name": "add logo",
          "display": "add logo",
          "desc": "Place a logo or other graphic object in the Viewer's non-transformable overlay.",
          "keywords": "*add *logo"
        },
        {
          "name": "titles",
          "display": "titles",
          "desc": "Provides a straightforward means to place text in the Viewer.",
          "keywords": "*titles"
        },
        {
          "name": "3d titles",
          "display": "3d titles",
          "desc": "Provides a straightforward means to place text in the Viewer.",
          "keywords": "*3d *titles"
        },
        {
          "name": "place text",
          "display": "place text",
          "desc": "Provides a means to interactively place 2D and 3D renderable text strings or to read an EMT file to place the text.",
          "keywords": "*place *text"
        },
        {
          "name": "interactive labels",
          "display": "interactive labels",
          "desc": "Place formatted labels at probed locations within the Viewer.",
          "keywords": "*interactive *labels"
        },
        {
          "name": "application notes",
          "display": "application notes",
          "desc": "Add textual notes to your applications that are saved with the application.",
          "keywords": "*application *notes"
        },
        {
          "name": "format string",
          "display": "format string",
          "desc": "Convert values coming from various numeric and string input ports into a resultant string.",
          "keywords": "*format *string"
        }
      ]
    },
    {
      "name": "Subsetting",
      "display": "Subsetting",
      "modules": [
        {
          "name": "external faces",
          "display": "external faces",
          "desc": "Extracts external faces from a 2D or 3D field for rendering.",
          "keywords": "*external faces"
        },
        {
          "name": "external edges",
          "display": "external edges",
          "desc": "Extracts the outer edges of a mesh.",
          "keywords": "*external edges"
        },
        {
          "name": "cross section",
          "display": "cross section",
          "desc": "Create a fence diagram along a user defined (x, y) path.",
          "keywords": "cross section thin_fence"
        },
        {
          "name": "slice",
          "display": "slice",
          "desc": "Create a slice through an input field.",
          "keywords": "*slice"
        },
        {
          "name": "isolines",
          "display": "isolines",
          "desc": "Produce lines of constant value which can be offset from a 2D surface, or the external faces of a 3D surface.",
          "keywords": "*isolines"
        },
        {
          "name": "cut",
          "display": "cut",
          "desc": "Create a subset of your input on one side of a planar surface.",
          "keywords": "*cut"
        },
        {
          "name": "plume",
          "display": "plume",
          "desc": "Create a true 3D volumetric subset of a 3D input. The resulting volume can be used as input for further subsetting or volumetric computations since it is volumetric. This module should not normally be used when you desire a visualization of a plume but rather when you wish to do subsequent operations such as analysis, slices, etc.",
          "keywords": "*plume"
        },
        {
          "name": "plume area",
          "display": "plume area",
          "desc": "plume area module",
          "keywords": "*plume *area"
        },
        {
          "name": "constant shell",
          "display": "constant shell",
          "desc": "constant_shell module",
          "keywords": "*constant *shell"
        },
        {
          "name": "intersection",
          "display": "intersection",
          "desc": "Create a true 3D volumetric subset of a 3D input using multiple subset criteria. The resulting volume can be used as input for further subsetting or volumetric computations since it is volumetric.",
          "keywords": "*intersection plume"
        },
        {
          "name": "union",
          "display": "union",
          "desc": "Allows for a large number of complex parallel subsetting operations required to compute and visualize the union of multiple analytes and threshold levels.",
          "keywords": "*union plume"
        },
        {
          "name": "subset by expression",
          "display": "subset by expression",
          "desc": "Eliminate whole cells from the input mesh based on the nodal data of one or more nodes that comprise the cells.",
          "keywords": "subset by expression plume_cell"
        },
        {
          "name": "footprint",
          "display": "footprint",
          "desc": "Create the 2D footprint by creating a surface at the specified Z Position with an x-y extent that matches the 3D input.",
          "keywords": "*footprint"
        },
        {
          "name": "slope aspect splitter",
          "display": "slope aspect splitter",
          "desc": "Split an input field into two output fields based upon slope or aspect data using a subset expression.",
          "keywords": "*slope *aspect *splitter"
        },
        {
          "name": "crop and downsize",
          "display": "crop and downsize",
          "desc": "Subset or simplify an image or structured field.",
          "keywords": "*crop *and *downsize"
        },
        {
          "name": "select cell sets",
          "display": "select cell sets",
          "desc": "Select individual geologic layers or lithologic materials for output.",
          "keywords": "*select *cell *sets"
        },
        {
          "name": "orthoslice",
          "display": "orthoslice",
          "desc": "Displays slice positions north-south (vertical), east-west (vertical) and horizontal. The orthoslice module subsets a structured field by extracting one slice plane and can only be orthogonal to the X, Y, or Z axis.",
          "keywords": "*orthoslice"
        },
        {
          "name": "edges",
          "display": "edges",
          "desc": "Produce a wireframe representation of an unstructured cell data mesh. This allows viewing of all grid boundaries (internal AND external) of the input mesh. The edges module is useful in that it is able to render lines around adaptive gridding locations.",
          "keywords": "*edges"
        },
        {
          "name": "bounds",
          "display": "bounds",
          "desc": "Generate lines and/or surfaces that indicate the bounding box of a 3D structured field. This is useful when you need to see the shape of an object and the structure of its mesh.",
          "keywords": "*bounds"
        }
      ]
    },
    {
      "name": "Proximity",
      "display": "Proximity",
      "modules": [
        {
          "name": "distance to 2d area",
          "display": "distance to 2d area",
          "desc": "Use a surface representing a region to map data to a field. This allows downstream modules to cut inside or outside of the area.",
          "keywords": "distance to 2d area cut"
        },
        {
          "name": "distance to surface",
          "display": "distance to surface",
          "desc": "Map the distance from a surface to the points in a field as data. This allows downstream modules to cut above or below the surface.",
          "keywords": "distance to surface cut"
        },
        {
          "name": "distance to shape",
          "display": "distance to shape",
          "desc": "Map the distance from the a set shape to the nodes of the input field.",
          "keywords": "distance to shape cut"
        },
        {
          "name": "buffer distance",
          "display": "buffer distance",
          "desc": "Calculate the 2d distance from every node in the input field to the input line and add this distance as a data component.",
          "keywords": "*buffer *distance"
        },
        {
          "name": "distance to tunnel center",
          "display": "distance to tunnel center",
          "desc": "Calculate the 3d distance from every node in the input field to the input line and add this distance as a data component.",
          "keywords": "distance to tunnel center cut"
        },
        {
          "name": "overburden",
          "display": "overburden",
          "desc": "Compute the complete volume required to excavate a plume or ore body given the pit wall slope (measured from vertical) and the excavation digging accuracy (we refer to as buffer size).",
          "keywords": "*overburden"
        }
      ]
    },
    {
      "name": "Processing",
      "display": "Processing",
      "modules": [
        {
          "name": "node computation",
          "display": "node computation",
          "desc": "Use a Python script to manipulate the value or coordinates of a field.",
          "keywords": "*node *computation"
        },
        {
          "name": "cell computation",
          "display": "cell computation",
          "desc": "Use a Python script to manipulate the cell data values of a field.",
          "keywords": "*cell *computation"
        },
        {
          "name": "combine nodal data",
          "display": "combine nodal data",
          "desc": "Combine nodal data from multiple input fields which share the same structure.",
          "keywords": "combine nodal data components"
        },
        {
          "name": "interpolate nodal data",
          "display": "interpolate nodal data",
          "desc": "Interpolates nodal data from a source field to a target field which is contained within the input. ",
          "keywords": "*interpolate *nodal *data"
        },
        {
          "name": "interpolate cell data",
          "display": "interpolate cell data",
          "desc": "Interpolates cell data from one field to another using a Nearest Neighbor interpolation.",
          "keywords": "*interpolate *cell *data"
        },
        {
          "name": "compute thickness",
          "display": "compute thickness",
          "desc": "Measure the thickness of a field relative to a specified surface.",
          "keywords": "*compute *thickness"
        },
        {
          "name": "translate by data",
          "display": "translate by data",
          "desc": "Translates a field in x, y, or z based upon either a nodal or cell data component or a constant.",
          "keywords": "*translate *by *data"
        },
        {
          "name": "cell data to node data",
          "display": "cell data to node data",
          "desc": "Interpolate cell data components to nodal data components.",
          "keywords": "*cell *data *to *node *data"
        },
        {
          "name": "node data to cell data",
          "display": "node data to cell data",
          "desc": "Interpolate nodal data components to cell data components.",
          "keywords": "*node *data *to *cell *data"
        },
        {
          "name": "shrink cells",
          "display": "shrink cells",
          "desc": "Produce a mesh containing disjoint cells which can be optionally shrunk relative to their geometric centers. ",
          "keywords": "*shrink *cells"
        },
        {
          "name": "cell centers",
          "display": "cell centers",
          "desc": "Produce a mesh containing consisting of points, each point represents a geometrical center of a corresponding cell in the input mesh.",
          "keywords": "*cell *centers"
        }
      ]
    },
    {
      "name": "Import",
      "display": "Import",
      "modules": [
        {
          "name": "read evs field",
          "display": "read evs field",
          "desc": "Read a dataset from any of six different EVS compatible file formats into an EVS field.",
          "keywords": "read load evs field eff efb efz"
        },
        {
          "name": "import vtk",
          "display": "import vtk",
          "desc": "The import VTK module reads a dataset from the VTK format.",
          "keywords": "*import *vtk"
        },
        {
          "name": "import cad",
          "display": "import cad",
          "desc": "Read all versions of AutoCAD DWG and DXF files as well as Microstation DGN files.",
          "keywords": "import cad read dwg dxf dgn"
        },
        {
          "name": "import vector gis",
          "display": "import vector gis",
          "desc": "Reads vector file formats such as shapefiles.",
          "keywords": "import vector gis read"
        },
        {
          "name": "import raster as horizon",
          "display": "import raster as horizon",
          "desc": "Read several different raster format files as a single horizon.",
          "keywords": "import raster horizon geology"
        },
        {
          "name": "buildings",
          "display": "buildings",
          "desc": "Create 3d buildings interactively or from a file.",
          "keywords": "*buildings"
        },
        {
          "name": "read lines",
          "display": "read lines",
          "desc": "Read a series of points with data connected by lines.",
          "keywords": "*read *lines"
        },
        {
          "name": "read strike and dip",
          "display": "read strike and dip",
          "desc": "Read sampled locations with strike and dip values.",
          "keywords": "*read *strike *and *dip"
        },
        {
          "name": "read glyph",
          "display": "read glyph",
          "desc": "Reads glyphs saved in any of the three primary EVS field file formats.",
          "keywords": "load read glyph"
        },
        {
          "name": "read symbols",
          "display": "read symbols",
          "desc": "Creates symbolic representations of different borehole identifiers based on a set of user defined parameters.",
          "keywords": "*read *symbols"
        },
        {
          "name": "import geometry",
          "display": "import geometry",
          "desc": "Reads topology from geometry files, such as wavefront obj, for modeling.",
          "keywords": "import read geometry"
        }
      ]
    },
    {
      "name": "Export",
      "display": "Export",
      "modules": [
        {
          "name": "write evs field",
          "display": "write evs field",
          "desc": "Creates a file in one of 5 different formats containing all the mesh and nodal and/or cell data component information sent to the input port.",
          "keywords": "write save evs field eff efb"
        },
        {
          "name": "export web scene",
          "display": "export web scene",
          "desc": "Export EVS scenes with vector output of 3D models for the C Tech Web Viewer.",
          "keywords": "*export *web *scene"
        },
        {
          "name": "export pdf scene",
          "display": "export pdf scene",
          "desc": "Export EVS scenes with vector output of 3D models for the C Tech PDF Converter.",
          "keywords": "*export *pdf *scene"
        },
        {
          "name": "export nodes",
          "display": "export nodes",
          "desc": "Export an ASCII file containing the coordinates and optionally the data of any field in EVS.",
          "keywords": "write coordinates export nodes"
        },
        {
          "name": "export cad",
          "display": "export cad",
          "desc": "Write vector output of graphical results in industry standard AutoCAD DWG or DXF format or Microstation DGN format.",
          "keywords": "write export cad dwg dxf dgn"
        },
        {
          "name": "export vector gis",
          "display": "export vector gis",
          "desc": "Create a file in one of the following vector formats: ESRI Shapefile (*.shp); GMT ASCII Vectors (*.gmt); and MapInfo TAB (*.tab).",
          "keywords": "export vector gis write"
        },
        {
          "name": "export horizon to raster",
          "display": "export horizon to raster",
          "desc": "Create a raster file based on a single input horizon.",
          "keywords": "export horizon raster geology"
        },
        {
          "name": "write lines",
          "display": "write lines",
          "desc": "Save a series of points with data connected by lines. These lines are stored in the EVS Line File format.",
          "keywords": "*write *lines"
        },
        {
          "name": "export horizons to vistas",
          "display": "export horizons to vistas",
          "desc": "Write the fundamental geologic grid and horizon information to a file format that Ground Water Vistas can read.",
          "keywords": "export horizons vistas geology"
        }
      ]
    },
    {
      "name": "Modeling",
      "display": "Modeling",
      "modules": [
        {
          "name": "3d streamlines",
          "display": "3d streamlines",
          "desc": "Produce streamlines or streamribbons of a field which is a 2 or 3 element vector data component on any type of mesh.",
          "keywords": "*3d *streamlines"
        },
        {
          "name": "surface streamlines",
          "display": "surface streamlines",
          "desc": "Produce streamlines on any surface based on its slopes.",
          "keywords": "*surface *streamlines"
        },
        {
          "name": "create drill path",
          "display": "create drill path",
          "desc": "Produce a line path through a volume dependent on a starting locations and user defined restrictions.",
          "keywords": "*create *drill *path"
        },
        {
          "name": "modpath",
          "display": "modpath",
          "desc": "Use the cell by cell flow values generated from a MODFLOW project along with head values and other MODFLOW parameters to trace the path of a particle of water as it moves through the ground.",
          "keywords": "*modpath"
        },
        {
          "name": "scalars to vector",
          "display": "scalars to vector",
          "desc": "Create a 2d or 3d vector by combining selected scalar data components.",
          "keywords": "*scalars *to *vector"
        },
        {
          "name": "vector magnitude",
          "display": "vector magnitude",
          "desc": "Calculates the magnitude of a vector field data component at every node in a mesh.",
          "keywords": "*vector *magnitude"
        },
        {
          "name": "gradient",
          "display": "gradient",
          "desc": "Calculate the vector gradient field of a scalar data component at every node in a mesh.",
          "keywords": "*gradient"
        },
        {
          "name": "capture zone",
          "display": "capture zone",
          "desc": "Use streamlines technology to determine the volumetric regions of your model for which groundwater flow will be captured by one or more extraction wells.",
          "keywords": "*capture *zone"
        },
        {
          "name": "seepage velocity",
          "display": "seepage velocity",
          "desc": "Compute the vector groundwater flow field visualizations of the vector field.",
          "keywords": "*seepage *velocity"
        },
        {
          "name": "regional averages",
          "display": "regional averages",
          "desc": "Average nodal data values from the input field that fall into the input regions.",
          "keywords": "*regional *averages"
        }
      ]
    },
    {
      "name": "Geometry",
      "display": "Geometry",
      "modules": [
        {
          "name": "draw lines",
          "display": "draw lines",
          "desc": "Create both 2D and 3D lines interactively with the mouse.",
          "keywords": "*draw *lines"
        },
        {
          "name": "polyline processing",
          "display": "polyline processing",
          "desc": "Accepts a 3D polyline and can either increase or decrease the number of line segments of the polyline, as well as smooth or spline the polyline.",
          "keywords": "polyline spline smooth refine processing"
        },
        {
          "name": "triangulate polygons",
          "display": "triangulate polygons",
          "desc": "Converts a closed polyline into a triangulated surface.",
          "keywords": "*triangulate *polygons"
        },
        {
          "name": "triangle refinement",
          "display": "triangle refinement",
          "desc": "Clean, break up cells, and flip normals on an input surface.",
          "keywords": "triangle refinement tool"
        },
        {
          "name": "tubes",
          "display": "tubes",
          "desc": "Produce open or closed tubes of constant or data dependent radius using 3D lines or polylines as input.",
          "keywords": "*tubes"
        },
        {
          "name": "volumetric tunnel",
          "display": "volumetric tunnel",
          "desc": "Produce a volumetric extrusion along a line.",
          "keywords": "*volumetric *tunnel"
        },
        {
          "name": "cross section tubes",
          "display": "cross section tubes",
          "desc": "Produce open or closed tubes of user defined cross-section and constant or data dependent radius using 3D lines or polylines as input for the center line and a single 2D polyline as the cross-section of the tubes.",
          "keywords": "*cross *section *tubes"
        },
        {
          "name": "extrude",
          "display": "extrude",
          "desc": "Accepts surfaces, lines, or points and adds one to the dimensionality of the input by extruding the mesh in the Z direction.",
          "keywords": "*extrude"
        },
        {
          "name": "drive glyphs",
          "display": "drive glyphs",
          "desc": "Provides a way to move any object along multiple paths to create a 'driving' animation.",
          "keywords": "*drive *glyphs"
        },
        {
          "name": "place glyph",
          "display": "place glyph",
          "desc": "Place a single scalable geometric objects (glyph) at an interactively determined location.",
          "keywords": "*place *glyph"
        },
        {
          "name": "glyphs at nodes",
          "display": "glyphs at nodes",
          "desc": "Place geometric objects (glyphs) at all nodal locations of a field.",
          "keywords": "*glyphs *at *nodes"
        },
        {
          "name": "create fault surface",
          "display": "create fault surface",
          "desc": "Create a 3D grid that is aligned to a specified strike and dip.",
          "keywords": "*create *fault *surface"
        },
        {
          "name": "create grid",
          "display": "create grid",
          "desc": "Create a 2D or 3D uniform grid.",
          "keywords": "*create *grid"
        },
        {
          "name": "create spheroid",
          "display": "create spheroid",
          "desc": "Create a 2D or 3D spheroid.",
          "keywords": "*create *spheroid"
        }
      ]
    },
    {
      "name": "Projection",
      "display": "Projection",
      "modules": [
        {
          "name": "project onto surface",
          "display": "project onto surface",
          "desc": "Drape features onto surfaces.",
          "keywords": "surfmap project surface"
        },
        {
          "name": "geologic surfmap",
          "display": "geologic surfmap",
          "desc": "Drape lines onto horizons.",
          "keywords": "*geologic *surfmap"
        },
        {
          "name": "transform field",
          "display": "transform field",
          "desc": "Translate, rotate or scale the coordinates any field.",
          "keywords": "*transform *field"
        },
        {
          "name": "transform objects",
          "display": "transform objects",
          "desc": "Translate, rotate or scale the coordinates any number of input objects.",
          "keywords": "transform group objects"
        },
        {
          "name": "project field",
          "display": "project field",
          "desc": "Project the coordinates in any field from one coordinate system to another.",
          "keywords": "*project *field"
        }
      ]
    },
    {
      "name": "Image",
      "display": "Image",
      "modules": [
        {
          "name": "overlay aerial",
          "display": "overlay aerial",
          "desc": "Map an image onto the horizontal areas of an input field.",
          "keywords": "*overlay *aerial"
        },
        {
          "name": "texture cross section",
          "display": "texture cross section",
          "desc": "Project images from a fence onto a cross section surface.",
          "keywords": "*texture *cross *section"
        },
        {
          "name": "texture cell sets",
          "display": "texture cell sets",
          "desc": "Texture multiple images onto a field based on the cell sets, typically from stratigraphic or lithologic data, in the field.",
          "keywords": "texture geology cell sets"
        },
        {
          "name": "texture walls",
          "display": "texture walls",
          "desc": "Project images onto surfaces such as walls of buildings to add more realism to your visualizations.",
          "keywords": "*texture *walls"
        },
        {
          "name": "export georeferenced image",
          "display": "export georeferenced image",
          "desc": "Output a image in one of the following formats: BMP; TIF; JPG; and PNG. It will also output a world file that will allow the image to be placed correctly in applications that allow georeferencing.",
          "keywords": "export georeferenced image output"
        },
        {
          "name": "fly through",
          "display": "fly through",
          "desc": "Create an animation in which the view follows a complex 3D path on, through, or around your model.",
          "keywords": "*fly *through"
        },
        {
          "name": "texture sphere",
          "display": "texture sphere",
          "desc": "Project images onto a sphere.",
          "keywords": "*texture *sphere"
        },
        {
          "name": "texture cylinder",
          "display": "texture cylinder",
          "desc": "Project images onto a cylinder.",
          "keywords": "*texture *cylinder"
        },
        {
          "name": "read eft",
          "display": "read eft",
          "desc": "Reads EVS Textured Field (*.eft) files and displays them.",
          "keywords": "load read eft"
        }
      ]
    },
    {
      "name": "Time",
      "display": "Time",
      "modules": [
        {
          "name": "read tcf",
          "display": "read tcf",
          "desc": "Create models and animations of data that changes over time.",
          "keywords": "*read *tcf"
        },
        {
          "name": "read multi tcf",
          "display": "read multi tcf",
          "desc": "Create models and animations of data that changes over time.",
          "keywords": "*read *multi *tcf"
        },
        {
          "name": "time value",
          "display": "time value",
          "desc": "Parse a TVF file consisting of dates, values, and (optionally) labels.",
          "keywords": "*time *value"
        },
        {
          "name": "time horizon",
          "display": "time horizon",
          "desc": "Extract a horizon from a set of time-based horizons.",
          "keywords": "time geology horizon"
        },
        {
          "name": "time loop",
          "display": "time loop",
          "desc": "Loop through a series of times or specify a specific time of interest.",
          "keywords": "*time *loop"
        }
      ]
    },
    {
      "name": "Tools",
      "display": "Tools",
      "modules": [
        {
          "name": "group objects",
          "display": "group objects",
          "desc": "Organize multiple renderable objects by grouping them into a single renderable object.",
          "keywords": "*group *objects"
        },
        {
          "name": "group objects to 2d overlay",
          "display": "group objects to 2d overlay",
          "desc": "Applies all connected module's output to the Viewer's 2D overlay. Objects in the overlay are not transformed (rotated, zoomed, panned). These objects are locked in position. This provides a mechanism to apply graphics like drawing title blocks or company logos.",
          "keywords": "*group *objects *to *2d *overlay"
        },
        {
          "name": "trigger script",
          "display": "trigger script",
          "desc": "Allows any change in a module property to trigger a python script.",
          "keywords": "*trigger *script"
        },
        {
          "name": "merge fields",
          "display": "merge fields",
          "desc": "Combine the input fields from up to 4 separate inputs into a unified single field with any number of nodal data components.",
          "keywords": "*merge *fields"
        },
        {
          "name": "float math",
          "display": "float math",
          "desc": "Perform mathematical operations on values coming from various numeric and string input ports to generate a resultant value.",
          "keywords": "*float *math"
        },
        {
          "name": "create tin",
          "display": "create tin",
          "desc": "Convert nodes into a three-dimensional surface of triangular cells representing an unstructured mesh.",
          "keywords": "scat tin create"
        },
        {
          "name": "scat to unif",
          "display": "scat to unif",
          "desc": "The scat_to_unif module is used to convert scattered sample data into a three-dimensional uniform field.",
          "keywords": "*scat *to *unif"
        },
        {
          "name": "material to cellsets",
          "display": "material to cellsets",
          "desc": "Recreates the cell sets based on nodal data.",
          "keywords": "*material *to *cellsets"
        },
        {
          "name": "loop",
          "display": "loop",
          "desc": "Iterates an operation. For example, you could use a loop object to control the movement of an object in your application; such as incrementing the movement of a slider for a slice plane..",
          "keywords": "*loop"
        },
        {
          "name": "modify data 3d",
          "display": "modify data 3d",
          "desc": "Alter the data within its inner radius to a set value and the blend data in its outer radius between its original value and the set modification value.",
          "keywords": "*modify *data *3d"
        }
      ]
    },
    {
      "name": "View",
      "display": "View",
      "modules": [
        {
          "name": "viewer",
          "display": "viewer",
          "desc": "The Viewer displays all 3D models.",
          "keywords": "*viewer"
        }
      ]
    }
  ]
}